function tableout = importWaterfallData(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE1 Import data from a spreadsheet
%   DATA = IMPORTFILE1(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE1(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE1(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: NaN
%
% Example:
%   DemoTheoreticalWaterfallv1S2 = importfile1('Demo Theoretical Waterfall_v1.xlsm','Waterfall Model',9,36);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2017/03/15 16:37:05

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 9;
    endRow = 36;
end

%% Import the data
[~, ~, raw] = xlsread(workbookFile, sheetName, sprintf('A%d:AF%d',startRow(1),endRow(1)));
for block=2:length(startRow)
    [~, ~, tmpRawBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:AF%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
stringVectors = string(raw(:,[1,3,4,8,16,22,27]));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[2,5,6,7,9,10,11,12,13,14,15,17,18,19,20,21,23,24,25,26,28,29,30,31,32]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
tableout.Investor = stringVectors(:,1);
tableout.InvestorID = data(:,1);
tableout.GPLP = categorical(stringVectors(:,2));
tableout.VarName4 = stringVectors(:,3);
tableout.CapitalContributions = data(:,2);
tableout.AccumulatedEarnings = data(:,3);
tableout.TheoreticalNAV = data(:,4);
tableout.VarName8 = stringVectors(:,4);
tableout.CapitalContributions1 = data(:,5);
tableout.PreferredReturn = data(:,6);
tableout.GP = data(:,7);
tableout.LP = data(:,8);
tableout.GP1 = data(:,9);
tableout.LP1 = data(:,10);
tableout.Check = data(:,11);
tableout.VarName16 = stringVectors(:,5);
tableout.TheoreticalNAV1 = data(:,12);
tableout.LessDistribution = data(:,13);
tableout.ActualNAV = data(:,14);
tableout.BookCapital = data(:,15);
tableout.NetCarrytoBook = data(:,16);
tableout.VarName22 = stringVectors(:,6);
tableout.CarriedInterest = data(:,17);
tableout.Carrybookedpreviously = data(:,18);
tableout.NetCarrytoBook1 = data(:,19);
tableout.Check1 = data(:,20);
tableout.VarName27 = stringVectors(:,7);
tableout.GP2 = data(:,21);
tableout.LP2 = data(:,22);
tableout.GP3 = data(:,23);
tableout.LP3 = data(:,24);
tableout.CarriedInterest1 = data(:,25);

